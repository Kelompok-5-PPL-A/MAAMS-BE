# TODO -> build image first, publish, then use image to run tests

default:
  cache:                      # Pip's cache doesn't store the python packages
    paths:                    # https://pip.pypa.io/en/stable/topics/caching/
      - $(pwd)/.cache/pip
  before_script:
    - python -V               # Print out python version for debugging
    - echo "Creating virtual environment for the project..."
    - ls -al
    - pip install virtualenv
    - virtualenv venv
    - echo "Activating virtual environment..."
    - source venv/bin/activate
    - echo "Virtual environment activated."
    - echo $(pwd)

variables:
  REGISTRY_USER: $REGISTRY_USER
  CONTAINER_NAME: $CONTAINER_NAME
  IMAGE_NAME: $IMAGE_NAME
  IMAGE_TAG: $IMAGE_TAG
  GCP_USERNAME: $GCP_USERNAME
  GCP_STATIC_IP: $GCP_STATIC_IP
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  
  GIT_DEPTH: "0"

stages:
  - build
  - sonarcloud-check
  - test
  - release
  - deploy


Build:
  stage: build
  image: python:3.10-slim
  script:
    - echo "Starting build job..."
    - echo "Installing requirements..."
    - pip install -r requirements.txt
    - ls -a
    - deactivate
  tags:
    - runner-randi
  only:
    - master
    - staging
    - ci-cd


Sonarcloud-Check:
  stage: sonarcloud-check
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  tags:
    - runner-randi
  only:
    - master
    - staging
    - ci-cd

Test:
  stage: test
  image: python:3.10-slim
  dependencies:
    - Build
  script:
    - echo "Starting test job..."
    - echo "Installing requirements..."
    - pip install -r requirements.txt
    - ls -a
    - echo "Running unit tests..."
    - coverage run -m unittest          # Run tests
    - echo "Exporting results to htmlcov/coverage.html..."
    - coverage html           # Export result to html
    - echo "Coverage exported. Total coverage:"
    - grep -oP '<span class="pc_cov">\K[^<]+%' ./htmlcov/index.html
    - sleep 5
    - deactivate
    - ls -a
    - echo "All tests successfully passed."
  tags:
    - runner-randi
  only:
    - master
    - staging
    - ci-cd


Release:
  stage: release
  image: docker:latest
  services:
    - docker:dind
  dependencies:
    - Build
  before_script:
    - echo $DOCKER_PASSWORD | docker login -u $REGISTRY_USER --password-stdin docker.io
  script:
    - ls
    - docker build --build-arg SUPABASE_URL=$SUPABASE_URL --build-arg SUPABASE_USERNAME=$SUPABASE_USERNAME --build-arg SUPABASE_PASSWORD=$SUPABASE_PASSWORD -t $CONTAINER_IMAGE .
    - docker push $REGISTRY_USER/$IMAGE_NAME:$IMAGE_TAG
  after_script:
    - docker logout
  tags:
    - runner-randi
  only:
    - master


Deploy:
  stage: deploy
  before_script:
    - chmod 400 $SSH_KEY
  script:
    - ssh -o StrictHostKeyChecking=no -i $SSH_KEY $GCP_USERNAME@GCP_STATIC_IP "
      docker container rm -f $CONTAINER_NAME || true &&
      docker image rm -f $REGISTRY_USER/$IMAGE_NAME:$IMAGE_TAG || true &&
      docker run --name $CONTAINER_IMAGE -d -p 5000:8000"
  tags:
    - runner-randi
  only:
    - master
